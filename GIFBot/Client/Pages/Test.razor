@page "/test"
<TelerikTreeList Data="@Data"
                 IdField="Id" ParentIdField="ParentId"
                 Pageable="true" Width="850px" Height="400px">
   <TreeListColumns>
      <TreeListColumn Field="Name" Expandable="true" Width="320px" />
      <TreeListColumn Field="Id" Width="120px" />
      <TreeListColumn Field="ParentId" Width="120px" />
      <TreeListColumn Field="EmailAddress" Width="120px" />
      <TreeListColumn Field="HireDate" Width="220px" />
   </TreeListColumns>
</TelerikTreeList>

@code {
   public List<Employee> Data { get; set; }

   protected override async Task OnInitializedAsync()
   {
      Data = await GetTreeListData();
   }

   // sample model

   public class Employee
   {
      // denote the parent-child relationship between items
      public int Id { get; set; }
      public int? ParentId { get; set; }

      // custom data fields for display
      public string Name { get; set; }
      public string EmailAddress { get; set; }
      public DateTime HireDate { get; set; }
   }

   // data generation

   async Task<List<Employee>> GetTreeListData()
   {
      List<Employee> data = new List<Employee>();

      for (int i = 1; i < 5; i++)
      {
         data.Add(new Employee
         {
            Id = i,
            ParentId = null, // indicates a root-level item
            Name = $"root: {i}",
            EmailAddress = $"{i}@example.com",
            HireDate = DateTime.Now.AddYears(-i)
         }); ;

         for (int j = 1; j < 4; j++)
         {
            int currId = i * 100 + j;
            data.Add(new Employee
            {
               Id = currId,
               ParentId = i,
               Name = $"first level child {j} of {i}",
               EmailAddress = $"{currId}@example.com",
               HireDate = DateTime.Now.AddDays(-currId)
            });
         }
      }

      for (int i = 5; i < 10; i++)
      {
         data.Add(new Employee
         {
            Id = i,
            ParentId = null, // indicates a root-level item
            Name = $"root: {i}",
            EmailAddress = $"{i}@example.com",
            HireDate = DateTime.Now.AddYears(-i)
         }); ;

         for (int j = 5; j < 9; j++)
         {
            int currId = i * 100 + j;
            data.Add(new Employee
            {
               Id = currId,
               ParentId = i,
               Name = $"first level child {j} of {i}",
               EmailAddress = $"{currId}@example.com",
               HireDate = DateTime.Now.AddDays(-currId)
            });
         }
      }

      return await Task.FromResult(data);
   }
}