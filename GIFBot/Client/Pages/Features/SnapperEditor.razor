@page "/snappereditor/"
@using Microsoft.AspNetCore.SignalR.Client
@using GIFBot.Shared.Models.Features
@using GIFBot.Shared.Models.Visualization
@using GIFBot.Client.Components
@using Newtonsoft.Json
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<div class="jumbotron jumbotron-fluid p-1 my-1 text-left" style="background-color:#36173e">
   <h1><span class="oi oi-person" aria-hidden="true"></span> Snapper</h1>
</div>

<!-- Add New Command Window -->
<TelerikWindow Class="gifbot-modal-window" Width="550px" Height="400px" Centered="true" Visible="@mIsAddDialogVisible" Modal="true">
   <WindowTitle>
      <strong>Add New Command</strong>
   </WindowTitle>
   <WindowContent>
      <div class="form-group">
         <font class="text-white">What is the name of the command? Remember this may be activated via chat with bits, so it can't have spaces!</font>
      </div>
      <div class="form-group">
         <label for="uiCommand"><b>Command:</b></label>
         <TelerikTextBox Id="uiCommand" @bind-Value="mTempCommand.Command" />
      </div>
      <div class="container-fluid p-2">
         <p>
            <center>
               <button type="button" class="btn btn-secondary nav-item p-1 mr-3" style="background-color: #5c4872" @onclick="@HandleCancelAddCommand">
                  Cancel
               </button>
               <button type="button" class="btn btn-secondary nav-item p-1 mr-3" style="background-color: #5c4872" @onclick="@HandleConfirmAddCommand">
                  Add!
               </button>
            </center>
         </p>
      </div>
   </WindowContent>
</TelerikWindow>

<!-- Edit Command Window -->
<TelerikWindow Class="gifbot-modal-window" Width="750px" Height="600px" Centered="true" Visible="@mIsEditDialogVisible" Modal="true">
   <WindowTitle>
      <strong>Edit Command: @mTempCommand.Command</strong>
   </WindowTitle>
   <WindowContent>
      <div class="form-group form-check">
         <label class="form-check-label">
            <TelerikCheckBox Id="uiTempCommandEnabled" @bind-Value="mTempCommand.Enabled" /> Enabled
            <small id="uiTempCommandEnabled" class="form-text text-muted">When enabled, this command is available for use by viewers.</small>
         </label>
      </div>
      <div class="form-group">
         <label for="uiTempCommand"><b>Command:</b></label>
         <small id="uiTempCommandLabel" class="form-text text-white-50">The command to identify this Snapper event. When executed in chat, users must cheer. If this is in a channel point reward, just the command needs to be in the title of the reward. </small>
         <TelerikTextBox Id="uiTempCommand" @bind-Value="mTempCommand.Command" />
      </div>
      <div class="form-group">
         <label for="uiTempCommandRedemption">Redemption Type:</label>
         <small id="uiTempCommandRedemption" class="form-text text-muted">Snapper commands can be executed from either chat for bits or via channel point redemptions. Example chat usage: @kExampleChatUse</small>
         <RadzenRadioButtonList @bind-Value="@CurrentlyEditedCommandRedemption" TValue="int" Change="@(args => OnRedemptionTypeChange(args))">
            <Items>
               <RadzenRadioButtonListItem Text="Cheer" Value="0" />
               <RadzenRadioButtonListItem Text="Channel Points" Value="1" />
               <RadzenRadioButtonListItem Text="Tiltify Donation" Value="2" />
               <RadzenRadioButtonListItem Text="Tip" Value="3" />
            </Items>
         </RadzenRadioButtonList>
      </div>
      <div class="form-group">
         <label for="uiCommandCost">Cost:</label>
         <small id="uiCommandCost" class="form-text text-muted">The number of bits, channel points, etc. required to execute this command.</small>
         <TelerikNumericTextBox Id="uiCommandCost" Decimals="0" Min="1" Max="999999" @bind-Value="mTempCommand.Cost" />
      </div>
      <div class="form-group">
         <label for="uiTempCommandPreAnim"><b>Pre-Snap Animation:</b></label>
         <small id="uiTempCommandPreAnimLabel" class="form-text text-white-50">Play an animation BEFORE the snap command is executed! You may want to make sure this animation is BOT ONLY so it can't be triggered by anything but this snapper event.</small>
         <AnimationSelectorComponent Animations="@AnimationOptions" SelectedAnimation="mTempCommand.PreAnimationId" OnSelectedAnimationChanged="@HandlePreAnimationSelectionChanged"/>
      </div>
      <div class="form-group">
         <label for="uiTempCommandAnim"><b>Post-Snap Animation:</b></label>
         <small id="uiTempCommandAnimLabel" class="form-text text-white-50">Play an animation when this command is done executing! You may want to make sure this animation is BOT ONLY so it can't be triggered by anything but this snapper event.</small>
         <AnimationSelectorComponent Animations="@AnimationOptions" SelectedAnimation="mTempCommand.PostAnimationId" OnSelectedAnimationChanged="@HandlePostAnimationSelectionChanged"/>
      </div>
      <div class="form-group">
         <label for="uiTempCommandPhrase"><b>Phrase Sent to Chat:</b></label>
         <small id="uiTempCommandPhraseLabel" class="form-text text-white-50">The bot will send this to chat after performing the snap as most viewers won't see the mod action. Use $result to display who was snapped for specific viewer, revent, or self behaviors. When Thanos behavior is used, $result will have the number of people snapped!</small>
         <TelerikTextBox Id="uiTempCommandPhrase" Width="400px" @bind-Value="mTempCommand.SnapPhrase" />
      </div>
      <div class="form-group">
         <label for="uiTempCommandBehavior">Behavior Type:</label>
         <small id="uiTempCommandBehavior" class="form-text text-muted">Snapper commands can be executed from either chat for bits or via channel point redemptions. Please note that Mods Only mode will only work if you use GIFBot on your broadcaster account. Example chat usage: @kExampleChatUse</small>
         <RadzenRadioButtonList @bind-Value="@CurrentlyEditedCommandBehavior" TValue="int" Change="@(args => OnBehaviorTypeChange(args))">
            <Items>
               <RadzenRadioButtonListItem Text="Specific Viewer" Value="0" />
               <RadzenRadioButtonListItem Text="Revenge" Value="1" />
               <RadzenRadioButtonListItem Text="Thanos" Value="2" />
               <RadzenRadioButtonListItem Text="Self" Value="3" />
               <RadzenRadioButtonListItem Text="Mods Only" Value="4" />
            </Items>
         </RadzenRadioButtonList>
      </div>
      @if (mTempCommand.BehaviorType == SnapperBehaviorType.SpecificViewer)
      {
         <div class="form-group form-check">
            <label class="form-check-label">
               <TelerikCheckBox Id="uiTempCommandShouldOverride" @bind-Value="mTempCommand.OnlyTimeoutOverrideVictim" /> Only time out one specific viewer
               <small id="uiTempCommandShouldOverride" class="form-text text-muted">When enabled, a field will appear to let you provide the name of a specific viewer that is always timed out by this command. No random selections or input from viewers are used.</small>
            </label>
         </div>
         @if (mTempCommand.OnlyTimeoutOverrideVictim)
         {
            <div class="form-group">
               <label for="uiTempCommandOverrideVictimLbl"><b>Always Time Out this Viewer:</b></label>
               <small id="uiTempCommandOverrideVictimLbl" class="form-text text-white-50">This command will only ever time out the following viewer regardless of input.</small>
               <TelerikTextBox Id="uiTempCommandOverrideVictim" @bind-Value="mTempCommand.OverrideVictim" />
            </div>
         }
      }
      @if (mTempCommand.BehaviorType != SnapperBehaviorType.Revenge && mTempCommand.BehaviorType != SnapperBehaviorType.Self)
      {
         <div class="form-group form-check">
            <label class="form-check-label">
               <TelerikCheckBox Id="uiTempCommandSnapThanosToo" @bind-Value="mTempCommand.AlsoTimesOutThanos" /> Also Timeout the Snapper!
               <small id="uiTempCommandSnapThanosToo" class="form-text text-muted">When enabled, the snapper also gets timed out!</small>
            </label>
         </div>
      }
      <div class="form-group form-check">
         <label class="form-check-label">
            <TelerikCheckBox Id="uiTempCommandTimeoutValueUsesRange" @bind-Value="mTempCommand.TimeoutValueUsesRange" /> Randomize Timeout Value
            <small id="uiTempCommandTimeoutValueUsesRange" class="form-text text-muted">When enabled, timeout values will vary between the min and max seconds provided.</small>
         </label>
      </div>
      <div class="form-group">
         @if (mTempCommand.TimeoutValueUsesRange)
         {
            <label for="uiTimeoutValueMin">Timeout Value Minimum (in seconds):</label>
         }
         else
         {
            <label for="uiTimeoutValueMin">Timeout Value (in seconds):</label>
         }
         <TelerikNumericTextBox Id="uiTimeoutValueMin" Min="1" Max="999999" @bind-Value="mTempCommand.TimeoutValueMin" />
      </div>
      @if (mTempCommand.TimeoutValueUsesRange)
      {
         <div class="form-group">
            <label for="uiTimeoutValueMax">Timeout Value Maximum (in seconds):</label>
            <TelerikNumericTextBox Id="uiTimeoutValueMax" Min="1" Max="999999" @bind-Value="mTempCommand.TimeoutValueMax" />
         </div>
      }

      @if (mTempCommand.BehaviorType == SnapperBehaviorType.Thanos)
      {
         <div class="form-group">
            <label for="uiTempThanosPreAnnounceLbl"><b>Phrase Sent to Chat BEFORE Snapping:</b></label>
            <small id="uiTempThanosPreAnnounceLbl" class="form-text text-white-50">This is mostly to let chat know what's going on. Only mods will see the timeout spam.</small>
            <TelerikTextBox Id="uiTempThanosPreAnnounce" Width="400px" @bind-Value="mTempCommand.ThanosPreAnnouncement" />
         </div>
         <div class="form-group form-check">
            <label class="form-check-label">
               <TelerikCheckBox Id="uiTempCommandTimeoutDamageUsesRange" @bind-Value="mTempCommand.TimeoutDamageUsesRange" /> Randomize Number of Viewers Timed Out
               <small id="uiTempCommandTimeoutDamageUsesRange" class="form-text text-muted">When enabled, the number of viewers hit with the timeout will vary between the min and max percentage provided.</small>
            </label>
         </div>
         <div class="form-group">
            @if (mTempCommand.TimeoutDamageUsesRange)
            {
               <label for="uiTimeoutDamageMin">Minimum Percentage of Viewers Timed Out:</label>
            }
            else
            {
               <label for="uiTimeoutDamageMin">Percentage of Viewers Timed Out:</label>
            }
            <TelerikNumericTextBox Id="uiTimeoutDamageMin" Min="1" Max="100" @bind-Value="mTempCommand.TimeoutDamageMin" />
         </div>
         @if (mTempCommand.TimeoutDamageUsesRange)
         {
            <div class="form-group">
               <label for="uiTimeoutDamageMax">Maximum Percentage of Viewers Timed Out:</label>
               <TelerikNumericTextBox Id="uiTimeoutDamageMax" Min="1" Max="100" @bind-Value="mTempCommand.TimeoutDamageMax" />
            </div>
         }
      }

      <div class="container-fluid p-2">
         <p>
            <center>
               <button type="button" class="btn btn-secondary nav-item p-1 mr-3" style="background-color: #5c4872" @onclick="@HandleCancelEditCommand">
                  Cancel
               </button>
               <button type="button" class="btn btn-secondary nav-item p-1 mr-3" style="background-color: #5c4872" @onclick="@HandleConfirmEditCommand">
                  Save!
               </button>
            </center>
         </p>
      </div>
   </WindowContent>
</TelerikWindow>

<TelerikTabStrip @bind-ActiveTabIndex="@ActiveTabIndex">
   <TabStripTab Title="General">
      <div class="container-fluid p-2">
         The Snapper feature (designed by <a href="https://www.twitch.tv/andythefrenchy" target="_blank">twitch.tv/AndyTheFrenchy</a>) allows you to create special commands that
         can be used with either bits or channel points to have your viewers "snap" someone, temporarily, out of existence. The effect will basically time out the target.
         There are three kinds of snap behaviors:
         <p />
         <ul>
            <li>Single Viewer: The targeted viewer is timed out. Viewer's name must be in the message after the command or channel point redemption input, otherwise, it is RANDOM! You can also override the command to only ever time out one particular viewer (e.g. dewritten to stop him from making puns).</li>
            <li>Revenge: Got snapped? Great! Perform a revenge and that person gets timed out in return.</li>
            <li>Thanos: Snap a percentage of the chat!</li>
            <li>Self: Snap yourself out of existence.</li>
            <li>Mods Only: Snap a random moderator (must be using your broadcaster account as the bot and enable this feature below)</li>
         </ul>
         <p />
         Please note that your bot account must have moderator in your channel for this to work, because it needs to be able to use the /timeout command.
      </div>

      <div class="container-fluid p-2">
         <div class="form-group form-check">
            <label class="form-check-label">
               <TelerikCheckBox Id="uiEnabled" @bind-Value="Data.Enabled" OnChange="@(() => StateHasChanged())" /> Feature Enabled
               <small id="uiEnabled" class="form-text text-muted">When enabled, this feature is active and available to your users! Individual commands also have their own enabled states.</small>
            </label>
         </div>
      </div>

      <div class="container-fluid p-2">
         <div class="form-group form-check">
            <label class="form-check-label">
               <TelerikCheckBox Id="uiBotIsBroadcaster" @bind-Value="Data.IncludeMods" OnChange="@(() => StateHasChanged())" /> The bot is my broadcaster account, and I would like to include moderators in the snaps!
               <small id="uiBotIsBroadcaster" class="form-text text-muted">When enabled, snap commands can target moderators in addition to regular viewers and VIPs. If a moderator is snapped, they will be re-modded when their timeout expires.</small>
            </label>
         </div>
         @if (Data.IncludeMods)
         {
            <div class="form-group">
               <label for="uiImmuneModLbl"><b>Never timeout this moderator:</b></label>
               <small id="uiImmuneModLbl" class="form-text text-white-50">If you have a moderator that you cannot ever timeout (like another bot, head mod, etc.) then put their name in this text box.</small>
               <TelerikTextBox Id="uiImmuneMod" @bind-Value="Data.ImmuneModerator" />
            </div>
         }
      </div>

      <div class="row">
         <div class="container-fluid text-right p-3">
            <button type="reset" class="btn btn-secondary p-2" style="background-color: #6c4872" @onclick="@OnCancel">Cancel</button>
            <button type="submit" class="btn btn-primary p-2" style="background-color: #8f269e" @onclick="@OnSaveChanges">Save Changes</button>
         </div>
      </div>
   </TabStripTab>

   <TabStripTab Title="Snap Commands">
      <div class="container-fluid p-2">
         <TelerikGrid Sortable="true" FilterMode="Telerik.Blazor.GridFilterMode.FilterRow" Pageable="true" Data="@Data.Commands" PageSize="10">
            <GridToolBar>
               <GridSearchBox />
               <GridCommandButton Command="AddCommand" OnClick="@HandleAddRequest" Icon="add">Add Command</GridCommandButton>
            </GridToolBar>
            <GridColumns>
               <GridColumn Width="400px" Field=@nameof(SnapperCommand.Command) Title="Value" />
               <GridColumn Width="75px" Title="">
                  <Template Context="data">
                     <button type="button" class="btn btn-secondary p-0 m-0" style="background-color: #6c4872; width: 25px; height: 25px" @onclick="(() => HandleTestSnapRequest((data as SnapperCommand)))"><span class="oi oi-play-circle"></span></button>
                     <button type="button" class="btn btn-secondary p-0 m-0" style="background-color: #6c4872; width: 25px; height: 25px" @onclick="(() => HandleEditRequest((data as SnapperCommand)))"><span class="oi oi-pencil"></span></button>
                     <button type="button" class="btn btn-secondary p-0 m-0" style="background-color: #6c4872; width: 25px; height: 25px" @onclick="(() => HandleDeleteRequest((data as SnapperCommand)))"><span class="oi oi-trash"></span></button>
                  </Template>
               </GridColumn>
            </GridColumns>
         </TelerikGrid>
      </div>
   </TabStripTab>
</TelerikTabStrip>